# syntax=docker/dockerfile:1.7-labs

# --- Base image ---
FROM node:22-alpine AS base
ENV PNPM_HOME=/pnpm
ENV PATH=$PNPM_HOME:$PATH
WORKDIR /app

# --- Dependencies (cached) ---
FROM base AS deps
# Install system deps if needed (e.g., libc6-compat for Next.js binaries)
RUN apk add --no-cache libc6-compat openssl

# Install dependencies
COPY package.json yarn.lock ./
# Disable telemetry in CI/containers
ENV NEXT_TELEMETRY_DISABLED=1
# Install all deps (dev deps are required for build)
RUN yarn install --frozen-lockfile

# --- Builder ---
FROM deps AS builder
COPY . .
# Generate Prisma Client and build the Next.js app
RUN npx prisma generate && yarn build

# --- Runner (minimal) ---
FROM node:22-alpine AS runner
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
WORKDIR /app

# Add a non-root user
RUN addgroup -g 1001 -S nodejs \
  && adduser -S nextjs -u 1001

# Install runtime deps for Prisma engines
RUN apk add --no-cache openssl

# Copy standalone server and static assets from builder
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public
# Ensure Prisma engines and client are available at runtime
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# Ensure proper ownership
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 3000

# You can set PORT via env; Next respects it in standalone server
ENV PORT=3000

# Start the server generated by Next standalone output
CMD ["node", "server.js"]
